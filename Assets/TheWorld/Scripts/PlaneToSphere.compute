
float2 SphereToUV(float3 input, float yOffset)
{
    input = normalize(input);

    float lat = asin(input.y);
    float long = atan2(input.x, -input.z);
    
    const float PI = 3.141593;
    float u = (long / PI + 1) * 0.5;
    float v = lat / PI + 0.5;

    return float2(clamp(u, 0, 1), v);
}

#pragma kernel TextureToSphere

StructuredBuffer<float3> readPoints;
RWStructuredBuffer<float4> colors;
Texture2D<float4> ColorMap;
SamplerState samplerColorMap;

[numthreads(1,1,1)]
void TextureToSphere(uint3 id : SV_DispatchThreadID)
{
    float2 uv = SphereToUV((readPoints[id.x]), 0);
    float4 depth = ColorMap.SampleLevel(samplerColorMap, float2(uv.x, uv.y), 0);
    colors[id.x] = float4(depth);
}